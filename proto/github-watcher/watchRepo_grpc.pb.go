// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/github-watcher/watchRepo.proto

package github_watcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatchRepoServiceClient is the client API for WatchRepoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchRepoServiceClient interface {
	WatchRepo(ctx context.Context, in *WatchRepoRequest, opts ...grpc.CallOption) (*WatchRepoResponse, error)
}

type watchRepoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchRepoServiceClient(cc grpc.ClientConnInterface) WatchRepoServiceClient {
	return &watchRepoServiceClient{cc}
}

func (c *watchRepoServiceClient) WatchRepo(ctx context.Context, in *WatchRepoRequest, opts ...grpc.CallOption) (*WatchRepoResponse, error) {
	out := new(WatchRepoResponse)
	err := c.cc.Invoke(ctx, "/githubWatcher.WatchRepoService/WatchRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchRepoServiceServer is the server API for WatchRepoService service.
// All implementations must embed UnimplementedWatchRepoServiceServer
// for forward compatibility
type WatchRepoServiceServer interface {
	WatchRepo(context.Context, *WatchRepoRequest) (*WatchRepoResponse, error)
	mustEmbedUnimplementedWatchRepoServiceServer()
}

// UnimplementedWatchRepoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatchRepoServiceServer struct {
}

func (UnimplementedWatchRepoServiceServer) WatchRepo(context.Context, *WatchRepoRequest) (*WatchRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchRepo not implemented")
}
func (UnimplementedWatchRepoServiceServer) mustEmbedUnimplementedWatchRepoServiceServer() {}

// UnsafeWatchRepoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchRepoServiceServer will
// result in compilation errors.
type UnsafeWatchRepoServiceServer interface {
	mustEmbedUnimplementedWatchRepoServiceServer()
}

func RegisterWatchRepoServiceServer(s grpc.ServiceRegistrar, srv WatchRepoServiceServer) {
	s.RegisterService(&WatchRepoService_ServiceDesc, srv)
}

func _WatchRepoService_WatchRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchRepoServiceServer).WatchRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubWatcher.WatchRepoService/WatchRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchRepoServiceServer).WatchRepo(ctx, req.(*WatchRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchRepoService_ServiceDesc is the grpc.ServiceDesc for WatchRepoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchRepoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "githubWatcher.WatchRepoService",
	HandlerType: (*WatchRepoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WatchRepo",
			Handler:    _WatchRepoService_WatchRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/github-watcher/watchRepo.proto",
}
